#!/bin/sh

# if [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
# 	set -a
# fi

DOCKER_COMMAND=(docker run --pull=never --rm)

# generic function to open /bin/sh for the specified docker container
dshell() {
	if [[ -z "${D_SHELL}" ]]; then
  		D_SHELL="/bin/sh"
	else
  		D_SHELL="${D_SHELL}"
	fi
	${DOCKER_COMMAND[@]} \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$(pwd):/tmp/src" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-w /tmp/src \
		-it \
		--entrypoint=${D_SHELL} \
		$@
}

# same as above but with finch
fshell() {
	if [[ -z "${D_SHELL}" ]]; then
  		D_SHELL="/bin/sh"
	else
  		D_SHELL="${D_SHELL}"
	fi
	finch run --rm \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$(pwd):/tmp/src" \
		-w /tmp/src \
		-it \
		--entrypoint=${D_SHELL} \
		$@
}

dlabel(){
	docker inspect -f '{{json .Config.Labels}}' $1 |jq '.'
}

## Container/command shortcuts
ansible(){
	docker run --rm \
		-v "$(pwd):/tmp/src" \
		-w /tmp/src \
		--name ansible \
		localhost/ansible "$@"
}

ansible_playbook(){
	docker run --rm \
		-v "$(pwd):/tmp/src" \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$HOME/.ansible.cfg:/root/.ansible.cfg" \
		-v "$HOME/.ssh:/root/.ssh" \
		-w /tmp/src \
		--entrypoint ansible-playbook \
		--name ansible \
		localhost/ansible \
		"$@"
}

ansible_inventory(){
	docker run --rm \
		-v "$(pwd):/tmp/src" \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$HOME/.ansible.cfg:/root/.ansible.cfg" \
		-v "$HOME/.ssh:/root/.ssh" \
		-w /tmp/src \
		--entrypoint ansible-inventory \
		--name ansible \
		ansible "$@"
}

aws(){
	docker run -it --rm \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$(pwd):/tmp/src" \
		--log-driver none \
		--name aws \
		-w /tmp/src \
		amazon/aws-cli:latest "$@"
}

mdtohtml(){
	docker run --rm \
		-v $(pwd):/tmp/src \
		--workdir=/tmp/src \
		ubuntu \
		pandoc -o temp.html $1
}

mytop() {
	${DOCKER_COMMAND[@]} -it \
		mytop "$@"
}

packer(){
	docker run --rm \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$(pwd):/tmp/src" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-w /tmp/src \
		--name packer \
		packer "$@"
}

python(){
	docker run -it --rm \
		-v "$(pwd):/tmp/src" \
		-w /tmp/src \
		python "$@"
}

pythonaws(){
	env_string=""
	if [[ -f "env.ignore" ]]; then
		env_string='--env-file ./env.ignore'
	fi
	docker run -it --rm \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$(pwd):/tmp/src" \
		$env_string \
		-w /tmp/src \
		--log-driver none \
		python "$@"
}

stow(){
	docker run --rm \
		-v "$(pwd):/tmp/src" \
		-w /tmp/src \
		--name ubuntu \
		stow "$@"
}

terraform(){
	if [[ -z "${D_IMG_VER}" ]]; then
  		VERSION="latest"
	else
  		VERSION="${D_IMG_VER}"
	fi
	docker run -it --rm \
		-v "${HOME}/.aws:/root/.aws" \
		-v "$(pwd):/tmp/src" \
		-w /tmp/src \
		--name terraform \
		terraform:${VERSION} "$@"
		# -v /var/run/docker.sock:/var/run/docker.sock \
}
